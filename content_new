document.addEventListener('DOMContentLoaded', () => 
    {
    console.log('Content script loaded');
    initializeTemplateSelector();
    });
  
  document.addEventListener('mouseup', async () => 
    {
    const selectedText = window.getSelection().toString().trim();

    if (!selectedText) return;
        {
      console.log('Text selected:', selectedText);
      
      try 
      {
        const response = await chrome.runtime.sendMessage
        ({
          type: 'simplifyText',
          text: selectedText
        });
        
        console.log('Response from background:', response);
        
        if (response && response.success) 
        {
          console.log('Simplified text received:', response.simplified);
          await showSimplifiedText(response.simplified);
        } else 
        {
          console.error('Simplification failed:', response?.error || 'Unknown error');
        }
      } catch (error) 
      {
        console.error('Error sending message:', error);
      }
        }   
    });

  async function showSimplifiedText(text) 
{
    const existingTooltip = document.getElementById('simplification-tooltip');
    if (existingTooltip) 
    {
      existingTooltip.remove();
    }
    const tooltip = document.createElement('div')
    tooltip.id = 'simplification-tooltip';

    tooltip.style.cssText = 
    `
        position: fixed;
        top: 20px;
        background: white;
        color: #333;
        border: 2px solid #ccc;
    `;
    
    const selection = window.getSelection();
    const range = selection.getRangeAt(0);
    const rect = range.getBoundingClientRect();
    const parentElement = range.commonAncestorContainer.parentElement;
    
    if (parentElement) {
        parentElement.appendChild(tooltip);
    
        tooltip.style.position = "absolute";
        tooltip.style.left = `${rect.left - parentElement.getBoundingClientRect().left + 10}px`;
        tooltip.style.top = `${rect.top - parentElement.getBoundingClientRect().top}px`;
    }



}
function formatText(text) 
{
    const selectedTemplate = localStorage.getItem('selectedTemplate') || 'default';

    switch (selectedTemplate) 
    {
        case 'scientific':
            return `Scientific Papers${text}`;
        case 'article':
            return `Articles ${text}`;
        case 'newspaper':
            return `Newspaper ${text}`;
        default:
            return text;
    }
}
function initializeTemplateSelector() {
    const selector = document.createElement('select');
    selector.id = 'template-selector';
    selector.style = "position: fixed; left: 10px; top: 20px; z-index: 10000; padding: 5px;";

    const templates = {
        default: "Default",
        scientific: "Scientific",
        article: "Article",
        newspaper: "Newspaper",
    };

    for (const [value, label] of Object.entries(templates)) {
        const option = document.createElement('option');
        option.value = value;
        option.textContent = label;
        selector.appendChild(option);
    }

    selector.addEventListener('change', (e) => {
        localStorage.setItem('selectedTemplate', e.target.value);
        console.log('Template selected:', e.target.value);
    });

    document.body.appendChild(selector);
}
